delimiters "<", ">"

builder(message) ::= <<
public static final class Builder {

    <message.fields:builder_field_declaration(); separator="\n">

    private Builder() {}

    <message.fields:builder_field_accessors(); separator="\n">

    public <message.javaName> build() {
        return new <message.javaName>(this);
    }

}
>>

builder_constructor(message) ::= <<
private <message.javaName>(Builder builder) {
    <message.fields:builder_field_constructor_init(); separator="\n">
}
>>

builder_factory_method(message) ::= <<
public static Builder newBuilder() {
    return new Builder();
}
>>


builder_field_constructor_init(field) ::= <%
<if(field.repeated)>
this.<field.javaName> = builder.<field.javaBuilderRepeatedGetterName>();
<else>
<if(field.javaIsScalarNullableType)>
this.<field.javaName> = builder.<field.javaName> == null ? <field.javaDefaultValue> : builder.<field.javaName>;
<else>
this.<field.javaName> = builder.<field.javaName>;
<endif>
<endif>
%>



builder_field_declaration(field) ::= <<
<if(field.repeated)>
private <field.javaRepeatedType> <field.javaName>;
<else>
private <field.javaType> <field.javaName>;
<endif>
>>

builder_field_accessors(field) ::= <<
<if(field.repeated)>
public <field.javaRepeatedType> <field.javaBuilderRepeatedGetterName>() {
    if (this.<field.javaName> == null) {
        return java.util.Collections.synchronizedList(new java.util.ArrayList<>());
    }
    return java.util.Collections.synchronizedList(this.<field.javaName>);    
}

public Builder <field.javaBuilderRepeatedSetterName>(<field.javaRepeatedType> <field.javaName>) {
    this.<field.javaName> = <field.javaName>;
    return this;
}

public Builder <field.javaBuilderRepeatedAdderName>(<field.javaType> <field.javaName>) {
    if (this.<field.javaName> == null) {
        this.<field.javaName> = new java.util.ArrayList\<>();
    } 
    this.<field.javaName>.add(<field.javaName>);
    return this;
}

public Builder <field.javaBuilderRepeatedAdderName>(<field.javaRepeatedType> <field.javaName>) {
    if (this.<field.javaName> == null) {
        this.<field.javaName> = new java.util.ArrayList\<>();
    } 
    this.<field.javaName>.addAll(<field.javaName>);
    return this;
}
<else>
public Builder <field.javaBuilderSetterName>(<field.javaType> <field.javaName>) {
    this.<field.javaName> = <field.javaName>;
    return this;
}

public <field.javaType> <field.javaBuilderGetterName>() {
    return <field.javaName>;
}
<endif>
>>
